---

- name: Move the database directory from role < 1.3.0 to new the location if required
  block:
    - name: Ensure the database is not installed directly in "{{ postgresql_data }}" directory
      stat:
        path: "{{ postgresql_data }}/PG_VERSION"
      register: pg_version_120
      failed_when: pg_version_120.stat.exists
  rescue:
    - name: 'Move the database from "{{ postgresql_data }}" to "{{ _data_subdir }}"'
      command: "{{ item }}"
      args:
        creates: "{{ _data_subdir }}/PG_VERSION"
      with_items:
        - systemctl stop postgresql
        - 'mv "{{ postgresql_data }}" "{{ postgresql_data }}_tmp"'
        - 'mkdir "{{ postgresql_data }}"'
        - 'mv "{{ postgresql_data }}_tmp" "{{ _data_subdir }}"'

- name: Ensure PostgreSQL is installed from Fedora repository
  dnf:
    state: present
    name:
      - postgresql-server
      - postgresql-contrib
      - postgresql-upgrade
    install_weak_deps: false
  retries: 10
  delay: 1
  register: _
  until: _ is successful

- name: Ensure database version is up to date with PostgreSQL engine version
  command: /usr/bin/postgresql-setup --upgrade
  register: pg_upgrade
  changed_when: pg_upgrade.rc == 0
  failed_when: false
  when: postgresql_upgrade | bool

- name: Check if PostgreSQL database exists
  stat:
    path: "{{ _data_subdir }}/PG_VERSION"
  register: pg_version

- name: Ensure PostgreSQL data directory is present
  file:
    path: "{{ item }}"
    owner: postgres
    group: postgres
    state: directory
    mode: 0700
    setype: postgresql_db_t
    recurse: true
  with_items:
    - "{{ postgresql_data }}"
    - "{{ _data_subdir }}"
  tags: molecule-idempotence-notest

- name: Ensure PostgreSQL data directory is inititialized
  command: "/usr/bin/initdb -D {{ _data_subdir }}"
  become: true
  become_user: postgres
  when: not pg_version.stat.exists

- name: Ensure PostgreSQL is configured to use unix socket only
  lineinfile:
    path: "{{ _data_subdir }}/postgresql.conf"
    regexp: "^{{ item.split(' ')[0] }} "
    line: "{{ item }}"
    create: true
  with_items:
    - "listen_addresses = ''"
    - "unix_socket_group = 'postgres_socket'"
    - "unix_socket_permissions = 0770"
    - "unix_socket_directories = '/var/run/postgresql'"

- name: Ensure group postgres_socket exists
  group:
    name: postgres_socket
    state: present

- name: "Ensure {{ postgresql_user }} user is member of postgres_socket group"
  user:
    name: "{{ postgresql_user }}"
    groups: postgres_socket
    append: true
  when: postgresql_user is defined

- name: Ensure postgres user is member of postgres_socket group
  user:
    name: postgres
    groups: postgres_socket
    append: true

- name: Ensure PostgreSQL authentification is set to restricted peer
  template:
    src: pg_hba.conf.j2
    dest: "{{ _data_subdir }}/pg_hba.conf"
  when: postgresql_user is defined

- name: Ensure PostgreSQL service parent directory is present
  file:
    path: /etc/systemd/system/postgresql.service.d
    state: directory

- name: Ensure PostgreSQL service configuration is present
  template:
    src: postgresql_service.conf.j2
    dest: /etc/systemd/system/postgresql.service.d/postgresql.conf

- name: Ensure PostgreSQL service is started and enabled at boot
  systemd:
    name: postgresql
    state: started
    enabled: true
    daemon_reload: true

- name: Ensure Ansible "python3-psycopg2" requirement is installed
  dnf:
    state: present
    name: python3-psycopg2
    install_weak_deps: false
  retries: 10
  delay: 1
  register: pg_python3_psycopg2
  until: pg_python3_psycopg2 is successful

- name: Ensure database is configured
  block:
    - name: Ensure PostgreSQL database is present
      postgresql_db:
        name: "{{ postgresql_database }}"
        state: present
      become: true
      become_user: postgres
      when: postgresql_database is defined

    - name: Ensure PostgreSQL database user is present
      postgresql_user:
        db: "{{ postgresql_database }}"
        name: "{{ postgresql_user }}"
        priv: ALL
        state: present
        role_attr_flags: NOSUPERUSER,NOCREATEDB,NOCREATEROLE
      become: true
      become_user: postgres
      when: postgresql_user is defined

    - name: Ensure other user cannot access the PostgreSQL database
      postgresql_privs:
        db: "{{ postgresql_database }}"
        role: PUBLIC
        type: database
        priv: ALL
        state: absent
      become: true
      become_user: postgres
      when: postgresql_database is defined
      tags: molecule-idempotence-notest

  always:
    - name: Ensure Ansible "python3-psycopg2" requirement is removed
      dnf:
        state: absent
        name: python3-psycopg2
      when: pg_python3_psycopg2.changed  # noqa no-handler

- name: Ensure database in properly indexed
  command: /usr/bin/reindexdb -a
  become: true
  become_user: postgres
  when:
    - postgresql_upgrade | bool
    - pg_upgrade.rc == 0
