---

- name: Ensure DNF CA certificates are present
  ansible.builtin.copy:
    src: "{{ common_dnf_sslcacert }}"
    dest: /etc/pki/tls/certs/dnf-ca-bundle.crt
  when: common_dnf_sslcacert is defined

- name: Check if DNF configuration was updated by RPM
  ansible.builtin.stat:
    path: /etc/dnf/dnf.conf.rpmnew
  register: _dnf_conf_rpmnew

- name: Ensure latest DNF configuration from RPM is used
  ansible.builtin.copy:
    remote_src: true
    src: /etc/dnf/dnf.conf.rpmnew
    dest: /etc/dnf/dnf.conf
  when: _dnf_conf_rpmnew.stat.exists

- name: Ensure DNF is configured
  community.general.ini_file:
    path: /etc/dnf/dnf.conf
    section: main
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    no_extra_spaces: true
  no_log: "{{ item.no_log | default(false) }}"
  with_items:
    - option: max_parallel_downloads
      value: 10
    - option: fastestmirror
      value: "{{ common_dnf_fastestmirror | string | lower }}"
    - option: keepcache
      value: "{{ common_dnf_keepcache | string | lower }}"
    - option: install_weak_deps
      value: "{{ common_dnf_install_weak_deps | string | lower }}"
    - option: proxy
      value: "{{ common_dnf_proxy | default(omit) }}"
      when: "{{ common_dnf_proxy is defined }}"
    - option: proxy_auth_method
      value: "{{ common_dnf_proxy_auth_method | default(omit) }}"
      when: "{{ common_dnf_proxy_auth_method is defined }}"
    - option: proxy_password
      value: "{{ common_dnf_proxy_password | default(omit) }}"
      when: "{{ common_dnf_proxy_password is defined }}"
      no_log: true
    - option: proxy_username
      value: "{{ common_dnf_proxy_username | default(omit) }}"
      when: "{{ common_dnf_proxy_username is defined }}"
    - option: sslcacert
      value: /etc/pki/tls/certs/dnf-ca-bundle.crt
      when: "{{ common_dnf_sslcacert is defined }}"
    - option: gpgcheck
      value: "1"
    - option: localpkg_gpgcheck
      value: "{{ ((common_os_hardening_localpkg_gpgcheck | bool) and (common_os_hardening | bool)) | ternary('1', '0') }}"
    - option: tsflags
      value: nodocs
      when: "{{ common_dnf_nodocs | bool }}"
  when: item.when | default(true)

- name: Ensure Netdata is installed
  block:
    - name: Ensure python3-libdnf5 is present
      ansible.builtin.dnf:
        state: present
        name: python3-libdnf5
        install_weak_deps: false
  rescue:
    - name: Ensure python3-libdnf5 is present using CLI
      ansible.builtin.command: dnf install python3-libdnf5 -y
      changed_when: false

- name: Ensure DNF automatic and DNF system upgrade are installed
  ansible.builtin.dnf:
    state: present
    name:
      - dnf-automatic
      - dnf-plugin-system-upgrade
    install_weak_deps: false
  retries: 10
  delay: 1
  register: _
  until: _ is successful

- name: Check if DNF automatic configuration was updated by RPM
  ansible.builtin.stat:
    path: /etc/dnf/automatic.conf.rpmnew
  register: _dnf_automatic_conf_rpmnew

- name: Ensure latest DNF automatic configuration from RPM is used
  ansible.builtin.copy:
    remote_src: true
    src: /etc/dnf/automatic.conf.rpmnew
    dest: /etc/dnf/automatic.conf
  when: _dnf_automatic_conf_rpmnew.stat.exists

- name: Ensure DNF automatic is configured
  community.general.ini_file:
    path: /etc/dnf/automatic.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - section: commands
      option: apply_updates
      value: "yes"
    - section: commands
      option: upgrade_type
      value: "{{ common_dnf_automatic_upgrade_type }}"
    - section: emitters
      option: emit_via
      value: email,stdio
    - section: email
      option: email_from
      value: root
    - section: command_email
      option: email_from
      value: root
    - section: commands
      option: reboot
      value: "{{ (_dnf_automatic_restart_install | bool) | ternary('when-needed', 'never') }}"

- name: Ensure dnf-automatic timer is configured
  ansible.builtin.systemd:
    name: dnf-automatic.timer
    enabled: true
    state: started
    daemon_reload: true
  when: not (common_dnf_automatic_on_shutdown | bool)

- name: Ensure dnf-automatic-on-shutdown is installed
  ansible.builtin.copy:
    src: dnf-automatic-on-shutdown.service
    dest: /etc/systemd/system/dnf-automatic-on-shutdown.service
  when: common_dnf_automatic_on_shutdown | bool

- name: Ensure dnf-automatic-on-shutdown service is configured
  ansible.builtin.systemd:
    name: dnf-automatic-on-shutdown.service
    state: started
    enabled: true
    daemon_reload: true
  when: common_dnf_automatic_on_shutdown | bool

- name: Ensure dnf-automatic-on-shutdown service is not present
  ansible.builtin.file:
    path: /etc/systemd/system/dnf-automatic-on-shutdown.service
    state: absent
  when: not (common_dnf_automatic_on_shutdown | bool)

- name: Ensure no unrequired previous dependencies are installed
  ansible.builtin.dnf:
    autoremove: true
  retries: 10
  delay: 1
  register: _
  until: _ is successful

- name: Ensure DNF "rpmnew" files are absent
  ansible.builtin.file:
    path: "{{ item }}.rpmnew"
    state: absent
  with_items:
    - /etc/dnf/automatic.conf
    - /etc/dnf/dnf.conf

- name: Ensure DNF "rpmsave" files are absent
  ansible.builtin.file:
    path: "{{ item }}.rpmsave"
    state: absent
  with_items:
    - /etc/dnf/automatic.conf
    - /etc/dnf/dnf.conf

- name: Ensure previous "dnf-automatic-restart" extra configuration is absent
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /usr/local/sbin/dnf-automatic-restart
    - /etc/systemd/system/dnf-automatic-install.service.d/dnf-automatic-restart.conf
    - /etc/systemd/system/dnf-automatic-install.service.d/
